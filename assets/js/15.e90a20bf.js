(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{280:function(e,n,t){"use strict";t.r(n);var a=t(13),r=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"realty-management-part-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#realty-management-part-3"}},[e._v("#")]),e._v(" Realty Management - Part 3")]),e._v(" "),n("p",[e._v("Part 1: "),n("RouterLink",{attrs:{to:"/tco/exercises/realty_management.html"}},[e._v("Realty Management - Part 1")]),e._v("\nPart 2: "),n("RouterLink",{attrs:{to:"/tco/exercises/realty_management_2.html"}},[e._v("Realty Management - Part 2")])],1),e._v(" "),n("p",[e._v("The realty agency has come back to your company one last time to improve the security of their application:")]),e._v(" "),n("h2",{attrs:{id:"new-security-groups"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new-security-groups"}},[e._v("#")]),e._v(" New Security Groups")]),e._v(" "),n("p",[e._v("To better manage the responsibilities and permissions of their employees, the agency wants to separate their system users\ninto three new groups: Property Managers, Tenancy Managers & Tenancy Agents.")]),e._v(" "),n("p",[e._v("Property Managers can read, write, create and unlink both Properties & Tenancies.\nTenancy Managers and Tenancy Agents are only able to read, write, create and unlink Tenancies.")]),e._v(" "),n("p",[e._v("These new groups should be grouped under a new "),n("strong",[e._v("Realty Management")]),e._v(" category.")]),e._v(" "),n("p",[n("strong",[e._v("Hint:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("< CREATE CATEGORY >\n<record id='<CATEGORY_ID>' model='ir.module.category'>\n    <field name='name'>Realty Management</field>\n        ...\n</record>\n\n< CREATE GROUPS >\n<record id='<GROUP_1_ID>' model='res.groups'>\n    <field name='name'>Tenancy Managers</field>\n    <field name='category_id' ref='<MODULE_NAME>.<CATEGORY_ID>' />\n        ...\n</record>\n\n<record id='<GROUP_2_ID>' model='res.groups'>\n    <field name='name'>Tenancy Agents</field>\n    <field name='category_id' ref='<MODULE_NAME>.<CATEGORY_ID>' />\n        ...\n</record>\n\n<record id='<GROUP_3_ID>' model='res.groups'>\n    <field name='name'>Property Managers</field>\n    <field name='category_id' ref='<MODULE_NAME>.<CATEGORY_ID>' />\n    <field name='implied_ids' ref='...' />\n        ...\n</record>\n\n< UPDATE ACCESS RIGHTS >\nUpdate the ir.model.access.csv file in your security folder to use the correct groups.\n\n")])])]),n("h2",{attrs:{id:"only-tenancy-managers-can-confirm-tenancies"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#only-tenancy-managers-can-confirm-tenancies"}},[e._v("#")]),e._v(" Only Tenancy Managers can Confirm Tenancies")]),e._v(" "),n("p",[e._v("The agency wants only Tenancy Managers, and by extension property managers, to be able to validate tenancies.\nTo achieve this, define a new view that inherits the base tenancy form view and make the "),n("strong",[e._v("Confirm")]),e._v(" button only\nvisible to users with the correct group.")]),e._v(" "),n("p",[n("strong",[e._v("Hint:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("< INHERIT THE FORM VIEW >\n<record id='<CUSTOM_ID>' model='ir.ui.view'>\n    ...\n    <field name='inherit_id' ref='<MODULE_NAME>.<INITIAL_FORM_VIEW>' />\n    <field name='groups_id' eval='[(4, ref(\"<MODULE_NAME>.<GROUP_ID>\"))]'/>\n    ...\n</record>\n")])])]),n("p",[e._v("It is also recommended to add a check on the python side to make sure Tenancies can only be validated by the correct group. To achieve this, use the following function available on any user record to check their groups:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("from odoo.exceptions import UserError\n...\nif not user.has_group('<MODULE_NAME>.<GROUP_ID>'):\n    raise UserError('...')\n...\n")])])]),n("h2",{attrs:{id:"tenancy-agents-can-only-see-their-own-tenancies"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tenancy-agents-can-only-see-their-own-tenancies"}},[e._v("#")]),e._v(" Tenancy Agents can only see their own Tenancies")]),e._v(" "),n("p",[e._v("To implement further security, the agency wishes to allow Tenancy Agents to only be able to view, write, create and unlink their own tenancies.")]),e._v(" "),n("p",[e._v("To achieve this, add a new field on the Tenancy model, where a user can be specified. By default, the value of the field\nshould be "),n("code",[e._v("this.env.user")]),e._v(", and only Tenancy Managers can change its value.")]),e._v(" "),n("p",[e._v("Once the field has been added, create new record rules to limit the access on the Tenancy Model.")]),e._v(" "),n("p",[n("strong",[e._v("Hint:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("< ADD A NEW FIELD TO THE TENANCY MODEL >\n...\nuser_id = fields.Many2one(\"res.users\", string=\"Agent\", default=lambda self: self.env.user)\n...\n\n< CREATE THE RECORD RULE >\n<record id='<CUSTOM_ID>' model='ir.rule'>\n    <field name='name'>Tenancies: Agents can only manage their own tenancies</field>\n    <field name='model_id' ref='model_realty_tenancy' />\n    <field name='domain_force'>[('user_id', '=', user.id)]</field>\n    <field name='groups' eval='...' />\n    ...\n        Set then permissions\n    ...\n</record>\n")])])]),n("h2",{attrs:{id:"define-a-sequence-for-tenancies"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#define-a-sequence-for-tenancies"}},[e._v("#")]),e._v(" Define a Sequence for Tenancies")]),e._v(" "),n("p",[e._v("To implement a better, more scalable naming convention for your tenancies, the agency wishes to define a new\nsequence that will be used to name your tenancies automatically.")]),e._v(" "),n("p",[e._v("To achieve this, define a new "),n("code",[e._v("ir.sequence")]),e._v(" record and use it to initialize the name of your tenancy.")]),e._v(" "),n("p",[n("strong",[e._v("Hint:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("< ADD A NEW SEQUENCE >\n<record id='<CUSTOM_ID>' model='ir.sequence'>\n    <field name='name'>Realty Tenancy</field>\n    <field name='code'>tenancy.sequence</field>\n    <field name='prefix'>TEN/%(year)s/</field>\n    <field name='padding' eval='...' />\n    ...\n</record>\n\n< OVERRIDE THE NAME FIELD. IT SHOULD NOT BE COMPUTED, AND ITS DEFAULT VALUE SHOULD BE '/'>\n\n< OVERRIDE THE CONFIRM METHOD >\n\ndef action_confirm(self, vals_list)\n    ...\n    self.name = self.env.ref('<MODULE_NAME>.<SEQUENCE_ID>').next_by_id()\n    # OR\n    self.name = self.env['ir.sequence'].next_by_code('realty.tenancy')\n    ...\n")])])]),n("h2",{attrs:{id:"new-report-for-tenancies"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new-report-for-tenancies"}},[e._v("#")]),e._v(" New Report for Tenancies")]),e._v(" "),n("p",[e._v("The agency wants to be able to print a document with the details of any given tenancy(ies).\nTo achieve this, create a new pdf report for the Tenancies model. The report should display all relevant information\nabout the tenancy.")]),e._v(" "),n("p",[e._v("If the tenancy is ongoing, the title of the report should be displayed in green.\nIf the tenancy is still in draft, the title of the report should be: 'Draft Tenancy' in gray.\nIf the tenancy is neither ongoing nor in draft, the title should be displayed in blue.")]),e._v(" "),n("p",[e._v("Print whatever information you think is pertinent, including the tenants, rents and dates.")]),e._v(" "),n("p",[e._v("You can check the Invoice report defined in "),n("code",[e._v("odoo/addons/account/views/report_invoice.xml")]),e._v(" to get an idea of what\nyour report should look like. No need to be as complex, however. Keep it simple.")]),e._v(" "),n("p",[n("strong",[e._v("Hint:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('< DEFINE A NEW REPORT ACTION >\n<record id=\'<CUSTOM_ID>\' model=\'ir.actions.report\'>\n    ...\n    <field name=\'report_name\'><MODULE_NAME>.tenancy_contract</field>\n    <field name=\'report_file\'><MODULE_NAME>.tenancy_contract</field>\n    ...\n</record>\n\n< DEFINE A NEW QWEB TEMPLATE FOR YOUR REPORT >\n<template id="tenancy_contract">\n    <t t-call="web.html_container">\n        <t t-foreach="docs" t-as="o">\n            <t t-call="web.external_layout">\n                <div class="page">\n\n                    Define the architecture of your report.\n\n                    You can use Bootstrap css classes to customize the look & feel.\n                    For example: To change the color of a paragraph, use text-success, text-info and so on.\n\n                </div>\n            </t>\n        </t>\n    </t>\n</template>\n\n')])])]),n("h2",{attrs:{id:"make-properties-visible-on-the-website"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-properties-visible-on-the-website"}},[e._v("#")]),e._v(" Make Properties Visible on the Website")]),e._v(" "),n("p",[e._v("The agency wishes to make their properties accessible via the website.")]),e._v(" "),n("p",[e._v("To achieve this, create a new controller with the following route "),n("code",[e._v("/properties/<int:property_id>")]),e._v(", the route method should take a "),n("code",[e._v("property_id")]),e._v(" parameter, that will be used to look-up a Property record through the ORM, then render it in a custom QWEB template.\nThe web page should at least render the Property's name and any other information you may think is pertinent.")]),e._v(" "),n("p",[n("strong",[e._v("Hint:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('< DEFINE A NEW CONTROLLER >\n\nclass RealtyController(...):\n\n@route(...)\ndef property_view(...)\n    ...\n    return request.render(<TEMPLATE_ID>, qcontext={...})\n\n< DEFINE A NEW QWEB TEMPLATE >\n<template id="<TEMPLATE_ID>">\n    <t t-call="website.layout">\n        <t t-set="pageName" t-value="\'homepage\'"/>\n        <div id="wrap">\n            ...\n        </div>\n    </t>\n</template>\n\n')])])]),n("p",[e._v("Once the controller and page are set up, add a button on the Property form view that redirects to the route of the controller and allows the users to view the property on the website.")])])}),[],!1,null,null,null);n.default=r.exports}}]);