{"remainingRequest":"/Users/mehdi/Github/mebe-odoo.github.io/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/mehdi/Github/mebe-odoo.github.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/mehdi/Github/mebe-odoo.github.io/docs/tco/exercises/realty_management_2.md?vue&type=template&id=162c0714&","dependencies":[{"path":"/Users/mehdi/Github/mebe-odoo.github.io/docs/tco/exercises/realty_management_2.md","mtime":1660911060902},{"path":"/Users/mehdi/Github/mebe-odoo.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1660894667575},{"path":"/Users/mehdi/Github/mebe-odoo.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1660894667575},{"path":"/Users/mehdi/Github/mebe-odoo.github.io/node_modules/babel-loader/lib/index.js","mtime":1660894667513},{"path":"/Users/mehdi/Github/mebe-odoo.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1660894667842},{"path":"/Users/mehdi/Github/mebe-odoo.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1660894667575},{"path":"/Users/mehdi/Github/mebe-odoo.github.io/node_modules/vue-loader/lib/index.js","mtime":1660894667842},{"path":"/Users/mehdi/Github/mebe-odoo.github.io/node_modules/@vuepress/markdown-loader/index.js","mtime":1660894666627}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}